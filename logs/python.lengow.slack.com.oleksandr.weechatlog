2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	            case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	    public $sql_serveur;
2016-04-14 16:40:15	⤷	    public $sql_port;
2016-04-14 16:40:16	⤷	    public $sql_utilisateur;
2016-04-14 16:40:17	⤷	    public $sql_password;
2016-04-14 16:40:18	⤷	    public $sql_bd;
2016-04-14 16:40:19	⤷	    // constructeur
2016-04-14 16:40:20	⤷	    public function __construct()
2016-04-14 16:40:21	⤷	    {
2016-04-14 16:40:22	⤷	        $this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	        $this->sql_port = 3306;
2016-04-14 16:40:24	⤷	        $this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	        $this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	        $this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	    }
2016-04-14 16:40:28	⤷	    public function connection()
2016-04-14 16:40:30	⤷	    {
2016-04-14 16:40:30	⤷	        try
2016-04-14 16:40:32	⤷	        {
2016-04-14 16:40:32	⤷	            if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	                $o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	            } else {
2016-04-14 16:40:36	⤷	                $o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	            }
2016-04-14 16:40:38	⤷	            $o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	            return $o;
2016-04-14 16:40:40	⤷	        } catch (Exception $e) {
2016-04-14 16:40:40	⤷	            echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	            echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	            echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	            printr($e);
2016-04-14 16:40:44	⤷	            echo $e;
2016-04-14 16:40:46	⤷	            exit();
2016-04-14 16:40:46	⤷	        }
2016-04-14 16:40:48	⤷	    }
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	    'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	    'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	    'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	    'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	    'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	    'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	    'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	    'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	    'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	    'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	    'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	    'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	    'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	    'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	    'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	    'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	    'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	    'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	    'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	    'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	    'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	    'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	    'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	    'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	    'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	    'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	    'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	    'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	    'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	    'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	    'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	    'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	    'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	    'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	    'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	    'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	    'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	    'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	    'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	    'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	    'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	    'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	    'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	    'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	    'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	    'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	    'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	    'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	    'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	    'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	    'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	    public $sql_serveur;
2016-04-14 16:41:46	⤷	    public $sql_port;
2016-04-14 16:41:46	⤷	    public $sql_utilisateur;
2016-04-14 16:41:48	⤷	    public $sql_password;
2016-04-14 16:41:48	⤷	    public $sql_bd;
2016-04-14 16:41:50	⤷	    public $idClient;
2016-04-14 16:41:50	⤷	    public $requete;
2016-04-14 16:41:52	⤷	    private $foundrows;
2016-04-14 16:41:52	⤷	    private $pdo;
2016-04-14 16:41:54	⤷	    private static $instance = null;
2016-04-14 16:41:54	⤷	    public static function getInstance()
2016-04-14 16:41:56	⤷	    {
2016-04-14 16:41:56	⤷	        if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	            $GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	        }
2016-04-14 16:42:00	⤷	        return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	    }
2016-04-14 16:42:02	⤷	    public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	    {
2016-04-14 16:42:04	⤷	        $this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	        $this->sql_port = 3307;
2016-04-14 16:42:06	⤷	        $this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	        $this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	        $this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	        $this->pdo = array();
2016-04-14 16:42:10	⤷	        $this->idClient = $idC;
2016-04-14 16:42:10	⤷	    }
2016-04-14 16:42:12	⤷	    private function connManager()
2016-04-14 16:42:12	⤷	    {
2016-04-14 16:42:14	⤷	        $langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	        // peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	        $pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	        $dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	        if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	           $dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	        }
2016-04-14 16:42:20	⤷	        switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	            case "bddread":
2016-04-14 16:42:22	⤷	            $this->sql_port = 3706;
2016-04-14 16:42:24	⤷	            break;
2016-04-14 16:42:26	⤷	            $this->sql_port = 3806;
2016-04-14 16:42:26	⤷	            break;
2016-04-14 16:42:28	⤷	            case "bdd-06":
2016-04-14 16:42:28	⤷	            //$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	            break;
2016-04-14 16:42:30	⤷	            case "bdd-04":
2016-04-14 16:42:32	⤷	            $this->sql_port = 3306;
2016-04-14 16:42:32	⤷	            break;
2016-04-14 16:42:34	⤷	            default:
2016-04-14 16:42:34	⤷	            $this->sql_port = 3706;
2016-04-14 16:42:36	⤷	            break;
2016-04-14 16:42:36	⤷	        }
2016-04-14 16:42:38	⤷	        if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	            if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	            if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	                $this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	            }
2016-04-14 16:42:42	⤷	            $this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	                'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	                $this->sql_utilisateur,
2016-04-14 16:42:46	⤷	                $this->sql_password,
2016-04-14 16:42:46	⤷	                $pdoOpts
2016-04-14 16:42:48	⤷	            );
2016-04-14 16:42:48	⤷	        }
2016-04-14 16:42:50	⤷	        if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	        return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	    }
2016-04-14 16:42:52	⤷	    private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	    {
2016-04-14 16:42:54	⤷	        global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	        if ($base == '') {
2016-04-14 16:42:56	⤷	            $base = 'lengow_client';
2016-04-14 16:42:58	⤷	        } elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	            if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	                $idClient = $this->idClient;
2016-04-14 16:43:00	⤷	            } else {
2016-04-14 16:43:02	⤷	                preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	                if (count($o)>0) {
2016-04-14 16:43:04	⤷	                    $idClient = $o[1];
2016-04-14 16:43:04	⤷	                } else {
2016-04-14 16:43:06	⤷	                    $idClient = 0;
2016-04-14 16:43:06	⤷	                }
2016-04-14 16:43:08	⤷	            }
2016-04-14 16:43:08	⤷	            foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	                if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	                    $srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	                }
2016-04-14 16:43:12	⤷	            }
2016-04-14 16:43:14	⤷	            // Change here for select real db
2016-04-14 16:43:14	⤷	            $srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	            $srv_host = 3306;
2016-04-14 16:43:16	⤷	            return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	        } else {
2016-04-14 16:43:18	⤷	            return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	        }
2016-04-14 16:43:20	⤷	    }
2016-04-14 16:43:22	⤷	    public function getConnection()
2016-04-14 16:43:22	⤷	    {
2016-04-14 16:43:24	⤷	        return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	    }
2016-04-14 16:43:26	⤷	    public function fetchAll($req)
2016-04-14 16:43:27	⤷	    {
2016-04-14 16:43:28	⤷	        $infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	        $this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	        //$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	        $this->requete = $req;
2016-04-14 16:43:32	⤷	        $this->db = $this->connManager();
2016-04-14 16:43:34	⤷	        if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	            print_r("PDO");
2016-04-14 16:43:36	⤷	            var_dump($this->pdo);
2016-04-14 16:43:36	⤷	            var_dump($infos);
2016-04-14 16:43:38	⤷	        }
2016-04-14 16:43:40	⤷	        try {
2016-04-14 16:43:40	⤷	            $p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	            $p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	            $foo = $p->execute();
2016-04-14 16:43:44	⤷	        } catch (Exception $e) {
2016-04-14 16:43:44	⤷	            var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	        }
2016-04-14 16:43:46	⤷	        // Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	        if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	           try {
2016-04-14 16:43:50	⤷	              $c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	              $c->execute();
2016-04-14 16:43:52	⤷	              $rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	              $this->foundrows = $rows;
2016-04-14 16:43:54	⤷	            } catch (Exception $e) {
2016-04-14 16:43:54	⤷	                var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	            }
2016-04-14 16:43:56	⤷	        }
2016-04-14 16:43:58	⤷	        try {
2016-04-14 16:43:58	⤷	            return $p->fetchAll();
2016-04-14 16:44:00	⤷	        } catch (Exception $e) {
2016-04-14 16:44:00	⤷	            var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	        }
2016-04-14 16:44:02	⤷	    }
2016-04-14 16:44:04	⤷	    public function fetchColumn($req)
2016-04-14 16:44:04	⤷	    {
2016-04-14 16:44:06	⤷	        $this->db = $this->connManager();
2016-04-14 16:44:06	⤷	        $stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	        $stmt->execute();
2016-04-14 16:44:08	⤷	        try {
2016-04-14 16:44:10	⤷	            return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	        } catch (Exception $e) {
2016-04-14 16:44:12	⤷	            error_log($e->getMessage());
2016-04-14 16:44:12	⤷	        }
2016-04-14 16:44:14	⤷	    }
2016-04-14 16:44:14	⤷	    public function getFoundRows()
2016-04-14 16:44:16	⤷	    {
2016-04-14 16:44:17	⤷	        return $this->foundrows;
2016-04-14 16:44:18	⤷	    }
2016-04-14 16:44:18	⤷	    public function goRequete()
2016-04-14 16:44:20	⤷	    {
2016-04-14 16:44:20	⤷	        $infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	        $this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	        $this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	        $this->db = $this->connManager();
2016-04-14 16:44:25	⤷	        return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	    }
2016-04-14 16:44:27	⤷	    public function goExecute()
2016-04-14 16:44:28	⤷	    {
2016-04-14 16:44:29	⤷	        $infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	        $this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	        $this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	        $this->db = $this->connManager();
2016-04-14 16:44:33	⤷	        return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	    }
2016-04-14 16:44:35	⤷	    public function last_insert_id()
2016-04-14 16:44:36	⤷	    {
2016-04-14 16:44:37	⤷	        return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	    }
2016-04-14 16:44:39	⤷	    public function countRow()
2016-04-14 16:44:40	⤷	    {
2016-04-14 16:44:41	⤷	        $p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	        $p->execute();
2016-04-14 16:44:43	⤷	        return $p->fetchColumn();
2016-04-14 16:44:44	⤷	    }
2016-04-14 16:44:45	⤷	    public function close()
2016-04-14 16:44:46	⤷	    {
2016-04-14 16:44:47	⤷	        $this->db = null;
2016-04-14 16:44:48	⤷	    }
2016-04-14 16:44:49	⤷	    public function __destruct()
2016-04-14 16:44:50	⤷	    {
2016-04-14 16:44:51	⤷	        $this->close();
2016-04-14 16:44:52	⤷	    }
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	sebastien.charret	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	                        │                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2015-11-26 10:00:17	sebastien.charret	Il y aurait moyen de pusher tes dev de mp_fnac pour que je fasse verifications avec py.test?
2015-11-26 10:14:48	oleksandr	oui, je vais faire ça
2015-11-26 10:30:41	sebastien.charret	thanks
2015-11-26 10:31:15	oleksandr	you are welcome
2015-11-26 10:32:10	⤷	mais c'est encore tres mal version
2015-11-26 10:32:26	sebastien.charret	je regarde j'ai peut etre trouver une solution
2015-11-26 10:32:36	⤷	https://github.com/pytest-dev/pytest-django/issues/76
2015-11-26 10:32:36		Support cleanup between tests with multiple databases · Issue #76 · pytest-dev/pytest-django · GitHub (https://github.com/pytest-dev/pytest-django/issues/76)
2015-11-26 10:32:36		pytest-django doesn't clean up between tests when using Django with multiple databases. The problem is related to this StackOverflow question: http://stackoverflow.com/questions/10121485/django-tes...
2015-11-26 10:32:47	oleksandr	Ok, merci
2015-11-26 10:46:05	sebastien.charret	-e git://github.com/Moerin/pytest-django.git#egg=pytest-django
2015-11-26 11:08:11	⤷	Commencer par les tests[modifier | modifier le code]
2015-11-26 11:08:11		Un test doit correspondre aux spécifications de l’application, il faut donc écrire les tests en premier puis les faire passer par la suite plutôt que d'écrire le code avant et de prendre le risque d’être influencé par celui-ci lors de la rédaction des tests 5. Bob Martin6, grand défenseur de la méthode TDD propose un modèle simple pour l'écriture des tests unitaires :
2015-11-26 11:08:11		1 écrire une fonction de test qui doit obtenir un résultat défini dans les spécifications. Ce code appelant un code qui n'existe pas encore, celui-ci doit faillir. Ceci à pour but de définir une fonction qui teste "quelque chose".
2015-11-26 11:08:11		2 écrire le code (le "quelque chose") pour faire passer le test
2015-11-26 11:08:11		3 Une fois test en succès, rajouter un autre test pour obtenir un résultat légèrement différent, en faisant varier les entrées par exemple. Ce nouveau test fera faillir le code principal4
2015-11-26 11:08:11		4 Modifier le code principal pour faire passer les tests
2015-11-26 11:08:11		5 recommencer, en éliminant et refactorisant les éventuels redondances dans le code des tests. On refactorise en même temps le code principal que le code des tests
2015-11-26 11:08:11		6 un test unitaire doit tester une caractéristique et une seule. On ne définit pas un "scénario" de test complexe dans un test unitaire.
2015-11-26 11:08:11		7 Il est déconseillé de tester les fonctions privées d'une classe, on se concentrera à tester les fonctions publique, c'est-à-dire, les interfaces avec lesquelles les acteurs extérieurs interagissent. (edited)
2015-11-26 11:09:34	⤷	https://fr.wikipedia.org/wiki/Test_unitaire
2015-11-26 11:12:26	oleksandr	merci, je vais etudier ca
2015-11-30 16:21:15	⤷	Salut.
2015-11-30 16:21:21	sebastien.charret	Hello
2015-11-30 16:21:44	oleksandr	Comment tu fais les test pour les methodes qui revienent pas q.c.
2015-11-30 16:22:13	⤷	par example method just fait les changement dans DB
2015-12-02 11:08:01	sebastien.charret	https://github.com/NARKOZ/hacker-scripts
2015-12-02 11:08:01		NARKOZ/hacker-scripts (https://github.com/NARKOZ/hacker-scripts)
2015-12-02 11:08:01		hacker-scripts - Based on a true story
2015-12-02 11:08:10	⤷	http://bash.im/quote/436725
2015-12-02 11:08:10		Цитата #436725 (http://bash.im/quote/436725)
2015-12-02 11:08:10		xxx: У нас тут YYY (билд инженера) сманили. Чел принципиально жил только в консоли и vim, диаграммы рисовал скриптами в dot, доки писал в wiki маркдауном, если что-либо требовало больше чем 1.5 минуты писал скрипт. Сидим разбираем его наследие. xxx: Из прекрасного xxx: smack-my-bitch-up.sh - шлет видимо его жене "Задержался на работе" и генерит отмазки из списка. Поставлено в cron, стреляет после 9 вечера если на рабочей станции висят интерактивные сессии по ssh с его логином. xxx: kumar-mudak.sh - сканит почту, ищет письма от Кумара (заграничный ДБА с говорящей фамилией) с ключевыми словами (sorry, help и т.д.) откатывает упомянутую базу стейджинга на последний бэкап и отписывается типа не вопрос будь аккуратнее в следующий раз. Зело заколебал его Кумар вестимо. xxx: badun.sh - поставлен на cron на определенные даты, шлет письма "плохо себя чувствую, поработаю из дома" опять же если к 8-45 утра не обнаружилось интерактивных сессий на рабочей станции. xxx: И наконец первый приз: coffe-blyat.sh - ждет 17 сек (!!!) логинится по ssh в кофе-машину (епрст, мы и понятия не имели что она в сетке да и еще что на ней sshd поднят) и засылает туда какую-то абракадабру. Экспериментальным путем выяснили что ЭТО запускает процесс варения half-caf chai latte среднего размера, которое начинает выливаться в чашку как раз к тому моменту когда неспеша идущий человек добирается от его офиса до автомата.
2015-12-02 11:59:41	oleksandr	cool story :simple_smile:
2015-12-02 11:59:51	sebastien.charret	oui c'est rigolo
2015-12-02 12:00:18	⤷	j'ai pense a toi quand j'appris que le gars etait russe
2015-12-02 12:00:40	⤷	du moins que c'etait ecrit en cyrillique
2015-12-02 12:01:24	oleksandr	:simple_smile:
2015-12-02 12:01:44	⤷	http://bash.im (bash.im) c'est cool site avec les petites histoires comme ca
2015-12-02 12:01:53	⤷	mais il est en russe
2015-12-02 12:02:10	sebastien.charret	oui j'ai vu :0
2015-12-03 17:13:31	oleksandr	Salut
2015-12-03 17:13:37	sebastien.charret	Salut
2015-12-03 17:13:43	oleksandr	Tu est fort avec django orm?
2015-12-03 17:13:50	sebastien.charret	ca depend
2015-12-03 17:14:37	oleksandr	est-ce qu'il y a possibilité de faire distinct() pour json field
2015-12-03 17:14:43	⤷	?
2015-12-03 17:14:55	⤷	je peux pas trouver http://a.ch (a.ch)
2015-12-04 16:35:32	⤷	Salut, as-tu une minute?
2015-12-04 16:35:51	sebastien.charret	attends je viens dans 5 min
2015-12-04 16:35:59	oleksandr	Ok, merci
2015-12-07 09:47:06	⤷	J'ai fait cette truc  avec mock
2015-12-07 09:47:30	⤷	c'est très utile
2015-12-07 09:47:42	sebastien.charret	quel truc? (edited)
2015-12-07 09:48:17	oleksandr	mock pour les functions des models
2015-12-07 09:48:35	⤷	et pour les functions de verification
2015-12-07 09:48:53	⤷	pour testing sans base de donnes
2015-12-07 09:49:05	sebastien.charret	sur ton commit?
2015-12-07 09:49:20	oleksandr	dans % minutes
2015-12-07 09:49:24	⤷	5*
2015-12-07 09:49:25	sebastien.charret	ok
2015-12-07 10:29:12	oleksandr	j'ai fait commit
2015-12-07 10:29:19	sebastien.charret	ok
2015-12-07 10:55:20	oleksandr	as-tu utilise fixtures in mock path?
2015-12-07 10:55:31	sebastien.charret	j'arrive
2015-12-09 16:18:57	oleksandr	mailto:samir.boulil@lengow.com (samir.boulil@lengow.com)/lengow44
2015-12-10 10:12:33	⤷	Salut
2015-12-10 10:12:48	⤷	tu as  travaille avec ebay?
2015-12-10 10:12:53	sebastien.charret	Salut
2015-12-10 10:12:55	⤷	non
2015-12-10 10:13:08	⤷	Mais Thomas et Marie Charlotte oui
2015-12-10 10:13:16	oleksandr	Merci
2015-12-10 14:32:00	⤷	Salut. as-tu une minute?
2015-12-10 14:32:19	sebastien.charret	Oui
2015-12-10 16:39:43	⤷	Pour ton probleme de tout a l'heure je pense que cela peut repondre (edited)
2015-12-10 16:39:57	⤷	https://docs.python.org/3/library/unittest.mock.html#where-to-patch
2015-12-10 16:40:07	oleksandr	merci
2015-12-10 16:41:05	⤷	The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. A couple of examples will help to clarify this.
2015-12-10 16:41:14	sebastien.charret	Oui
2015-12-11 11:48:13	oleksandr	j'ai resolu la probleme avec les fixtures avec cette ligne pytest_plugins = "mp_menlook.tests.conftests"
2015-12-11 11:48:31	sebastien.charret	cool
2015-12-11 15:53:54	oleksandr	Salut
2015-12-11 15:53:59	sebastien.charret	Salut
2015-12-11 15:54:14	oleksandr	est-ce que nous utilisons les views? (edited)
2015-12-11 15:54:40	sebastien.charret	Dans le v3 je ne sais pas
2015-12-11 15:55:01	⤷	pour appeller les task peut etre
2015-12-17 11:54:35	oleksandr	Salut
2015-12-17 11:54:41	⤷	as-tu une minute?
2015-12-17 11:54:41	sebastien.charret	Salut
2015-12-17 11:55:00	⤷	Oui mais deux minutes stp :simple_smile: et j'arrive
2015-12-17 11:55:25	oleksandr	j'ai aucune idée comment je peux faire une test pour fonction
2015-12-17 11:55:29	⤷	merci :simple_smile:
2015-12-18 14:29:45	⤷	argument spec dans mock et patch c'est très cool
2015-12-18 14:30:11	sebastien.charret	Oui ca facilite
2015-12-18 14:30:32	oleksandr	il peux mocker  tout la module
2015-12-18 14:30:47	⤷	Mock(spec=requests)
2016-02-04 16:46:18	sebastien.charret	Tu as deja mocker un model dans test tests?
2016-02-04 16:46:29	oleksandr	oui
2016-02-04 16:46:35	sebastien.charret	avec spec?
2016-02-04 16:47:04	oleksandr	ce depend
2016-02-04 16:47:27	⤷	j'ai mocker que method get ou filter
2016-02-04 16:47:50	sebastien.charret	Comment tu geres les foreign key?
2016-02-04 16:47:52	oleksandr	et peur etre j'ai mocker tout le model mais je suis pas sure
2016-02-04 16:48:00	sebastien.charret	ok
2016-02-04 16:52:05	oleksandr	@mock.patch('core_orders.models.OrderMarketplace.objects.get',
2016-02-04 16:52:05		                Mock(return_value=Mock(marketplace_status=['accept', 'ship', 'refund'])))
2016-02-04 17:04:52	sebastien.charret	Boulanger est une mirakl?
2016-02-04 17:04:57	oleksandr	oui
2016-02-04 17:05:01	sebastien.charret	merci
2016-02-04 17:05:08	oleksandr	de rien
2016-02-04 17:05:19	⤷	tu fait code review?
2016-02-04 17:05:33	sebastien.charret	non je creer boulanger dans l'api
2016-02-04 17:05:40	oleksandr	aa
2016-02-04 17:06:59	⤷	j'ai fait pas mal de changement dans thesaurus de mirakl et mentenant j'ai peur que tout est casse  :simple_smile:
2016-02-04 17:07:23	sebastien.charret	c'est un code tres critique
2016-02-04 17:07:43	⤷	je pense qu'il faut faire des test unitaires
2016-02-04 17:07:58	⤷	je dois corriger un probleme important dessus
2016-02-04 17:08:05	⤷	et je vais faire des test unitaires
2016-02-05 10:18:09	⤷	Coucou
2016-02-05 10:18:20	oleksandr	salut :simple_smile:
2016-02-05 10:18:23	sebastien.charret	tu as les acces pour la documentation ebay
2016-02-05 10:18:25	⤷	?
2016-02-05 10:18:32	oleksandr	oui
2016-02-05 10:19:05	⤷	http://developer.ebay.com/DevZone/large-merchant-services/Concepts/LandAPIRef.html
2016-02-05 10:19:08	⤷	voila
2016-02-05 10:19:32	sebastien.charret	merci
2016-02-05 10:19:50	oleksandr	de rien
2016-02-05 17:01:59	sebastien.charret	https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		https://lengow.facebook.com/groups/204515889894728/
2016-02-05 17:01:59		Facebook is a social utility that connects people with friends and others who work, study and live around them. People use Facebook to keep up with...
2016-02-11 10:00:29	oleksandr	127198
2016-02-11 10:15:26	sebastien.charret	Pour le reporting des erreurs comment veux tu que l'on procede?
2016-02-11 10:37:17	⤷	Il ya des offres pour ebay
2016-02-11 10:37:37	oleksandr	ok,  c'est bon
2016-02-15 14:30:51	sebastien.charret	http://localhost/adminer-4.2.1.php?pgsql=10.100.1.240&username=lengow&db=lengow&ns=channel&table=order_marketplace
2016-02-16 18:00:28	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0MJ919B3/errors.py (errors.py)
2016-02-18 11:06:03	sebastien.charret	Tu va au pot de depart de bokai?
2016-02-18 11:06:23	oleksandr	oui, pour une verre :simple_smile:
2016-02-18 11:06:34	sebastien.charret	Ok moi aussi
2016-02-25 11:26:42	oleksandr	./manage.py sync_thesaurus ebay_fr -a 447 -n
2016-03-01 14:10:09	⤷	https://music.yandex.ru/artist/218068
2016-03-01 14:10:46	⤷	c'est bon chanter  ukrainien
2016-03-01 14:12:29	sebastien.charret	ok merci
2016-03-01 14:12:34	⤷	je vais ecouter
2016-03-01 14:12:53	oleksandr	de rien
2016-03-01 16:17:13	⤷	sudo apt-get install libevent-dev libncurses-dev pkg-config
2016-03-01 16:17:19	⤷	http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04
2016-03-01 16:17:19		How to install new tmux 1.8 on Ubuntu 12.10 or 12.04? (http://askubuntu.com/questions/273013/how-to-install-new-tmux-1-8-on-ubuntu-12-10-or-12-04)
2016-03-01 16:17:19		Are there any PPA? If no, how to make it from sources? Which dev libs I'll need to do this?
2016-03-01 17:24:02	⤷	https://elementary.io/en/
2016-03-01 17:24:02		Download elementary OS (https://elementary.io/en/)
2016-03-01 17:24:02		A fast and open replacement for Windows and OS X. Pay what you want or download for free.
2016-03-08 17:58:56	sebastien.charret	romain.lepolh : Lengow%44
2016-03-09 11:00:20	oleksandr	https://lengow.atlassian.net/wiki/pages/viewpage.action?pageId=24608821
2016-03-09 15:16:13	⤷	http://aviato.v3-inte.poney.io/
2016-03-09 16:38:42	sebastien.charret	{
2016-03-09 16:38:42		      "code": "commentaire",
2016-03-09 16:38:42		      "entity": "OFFER",
2016-03-09 16:38:42		      "label": "Commentaire sur l'état",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "livraison",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "I. Politique de Livraison",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retour",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "II. Politique de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "retractation",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "III. Procédure d’exercice du droit de rétractation et du droit de retour",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    },
2016-03-09 16:38:42		    {
2016-03-09 16:38:42		      "code": "garantie",
2016-03-09 16:38:42		      "entity": "SHOP",
2016-03-09 16:38:42		      "label": "IV. Politique de garantie",
2016-03-09 16:38:42		      "required": false,
2016-03-09 16:38:42		      "type": "STRING"
2016-03-09 16:38:42		    }
2016-03-09 16:41:56	⤷	Couleur-dominante
2016-03-09 16:42:47	⤷	Sexe
2016-03-09 16:42:54	⤷	pour les declinaisons
2016-03-09 16:53:22	⤷	d8e7191b-be04-45c3-85d8-c2e957ebf60b
2016-03-09 16:53:32	⤷	https://marketplace.oclio.com/login
2016-03-09 18:49:34	oleksandr	DELETE FROM catalog.category_mapping where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)
2016-03-09 18:49:34		 DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))
2016-03-09 18:49:34		 DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664)))
2016-03-09 18:49:34		 DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4664))))
2016-03-10 10:24:05	⤷	------------------------------------------------------------------------
2016-03-10 10:24:07	⤷	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844))));
2016-03-10 10:24:07		DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844)));
2016-03-10 10:24:07		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844));
2016-03-10 10:24:07		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4844);
2016-03-10 10:51:34	sebastien.charret	DELETE FROM catalog.action where catalog_rule_id in (SELECT id FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852))));DELETE FROM feed.renderer_log where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.replace where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.rule where catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.injection WHERE catalog_structure_mapping_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.exclusion WHERE catalog_feed_id in (SELECT id FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852)));
2016-03-10 10:51:34		DELETE FROM catalog.structure_mapping WHERE channel_structure_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM catalog.category_mapping WHERE catalog_category_id in (SELECT id FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852));
2016-03-10 10:51:34		DELETE FROM channel.structure where channel_thesaurus_line_id in (SELECT id FROM channel.thesaurus_line where channel_thesaurus_id = 4852);
2016-03-17 15:27:50	oleksandr	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0TD17DC7/opisanie_obuchenia.docx (opisanie_obuchenia.docx)
2016-03-17 15:53:41	sebastien.charret	sebastien.charret uploaded a file: https://lengow.slack.com/files/sebastien.charret/F0TD3M9RC/opisanie_obuchenia_corrige.docx (opisanie_obuchenia_corrige.docx)
2016-03-17 17:39:28	⤷	Je t'ai transfere un suppmode qui semble assez urgent (edited)
2016-03-17 17:39:45	oleksandr	Ok
2016-03-22 12:10:32	sebastien.charret	<VirtualHost *:80>
2016-03-22 12:10:32		    ServerAdmin mailto:sylvain.tillier@lengow.com (sylvain.tillier@lengow.com)
2016-03-22 12:10:32		    DocumentRoot "/home/sebastien/workspace/svn/lengow/optitrack"
2016-03-22 12:10:32		    ServerName wsdl.lengow.local
2016-03-22 12:10:32		    <Directory "/home/sebastien/workspace/svn/lengow/optitrack">
2016-03-22 12:10:32		       Options -Indexes +IncludesNOEXEC +FollowSymLinks +ExecCGI
2016-03-22 12:10:32		       AllowOverride all
2016-03-22 12:10:32		       Require all granted
2016-03-22 12:10:32		    </Directory>
2016-03-22 12:10:32		    ErrorLog "/var/log/apache2/wsdl.local-error_log"
2016-03-22 12:10:32		    CustomLog "/var/log/apache2/wsdl.local-access_log" common
2016-03-22 12:10:32		</VirtualHost>
2016-03-23 16:11:55	oleksandr	http://stackoverflow.com/questions/29173299/super-init-vs-parent-init
2016-03-23 16:11:55		Super init vs. parent.__init__ (http://stackoverflow.com/questions/29173299/super-init-vs-parent-init)
2016-03-23 16:11:55		We're following a Python class in a book I'm involved with that does not use super for initialization from a inherited class. I'm having trouble giving a clear, straightforward description of the
2016-03-30 15:13:08	⤷	https://sellercentral.amazon.com/gp/help/help.html?ie=UTF8&itemID=1611&language=en_US&ref_=id_1611_cont_69042&
2016-03-30 15:32:45	sebastien.charret	http://api.lengow.com/T0/2016-02-10/2016-02-10/4553/9199/orders/commands/all/newxml/
2016-03-30 15:35:21	⤷	http://api.lengow.com/LOGISTICS/5979/112511/orderid/100066155-A/
2016-03-31 12:18:50	oleksandr	tu viens la https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124 ?
2016-03-31 12:18:50		[SESSION MENSUELLE] BDD ET TDD SONT DANS UN BATEAU (https://www.eventbrite.fr/e/billets-session-mensuelle-bdd-et-tdd-sont-dans-un-bateau-24287352124)
2016-03-31 12:18:50		Pour cette nouvelle session mensuelle, l’Agile Nantes vous propose une conférence démonstrative sur BDD et TDD. Vous verrez comment ces deux méthodes agiles de développement intègrent des tests continus ainsi que les outillages associés.  RÉSUMÉ Bédédé (Behaviour Driven Development) et Tédédé (Test Driven Development) sont dans un bateau Scrum (ou parfois Kanban) et tentent d’arriver à bon port : la livraison d’un produit fonctionnel et de haute qualité. Au cours de la soirée, nous vous raconterons leurs aventures et les différentes étapes de leur  périple. Dans leur voyage, ils pourront compter sur l’aide de leurs fidèles coéquipiers : Ops(idienne) : Charger du maintien des outils et du ravitaillement (Intégration continue, plateforme de sourcing et production) Archi(bald) : Qui va tester la performance et la charge utile du bateau. QA(lif) : Vérifie le bateau avant la livraison finale. Avec toujours dans leurs paquetages, une foultitude d’outils : Cucumber (Framework Gherkin) Spec (Framework de rédaction de test unitaire) Git (Gestion des sources) Gitlab CI ou Jenkins (Intégration continue) Gatling (Framework de test en charges) Soapui (Framework de test de WS) Selenium (Framework de test web) Inutile de savoir naviguer, cette présentation s’adresse à tous les testeurs, développeurs, agilistes de toutes les mers voulant découvrir le Behaviour Driven Development et/ou le Test Driven Development. INTERVENANT David YOTEAU, chef d’entreprise, société DADEYO Fils de geek,mathématicien avec une folle passion pour la résolution d’énigme, je suis tombé dans la communauté open source dès tout petit. #tag : Ruby, devops, architecture micro-service
2016-03-31 12:18:50		Where Cantine numérique, 11 impasse Juton, Nantes
2016-03-31 12:18:50		When mer le 6 avr. 2016, 19:00
2016-04-04 10:21:45	⤷	https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py
2016-04-04 10:21:45		Bitbucket (https://bitbucket.org/lengow-dev/pymarketplaces/commits/db224e8854505ecad57f39ac128a7db340ce72d0?at=feature/amazonv3&L=233#chg-sp_amazon/xsd.py)
2016-04-04 10:21:45		Bitbucket is a Git and Mercurial based source code management and collaboration solution in the cloud. Bitbucket is simple and powerful, enables code collaboration for teams, works with the tools that matter, and is easy to use even for teams new to Git and Mercurial
2016-04-04 10:21:54	⤷	fichier File sp_amazon/xsd.py
2016-04-04 10:22:09	⤷	function _print_with_indent
2016-04-05 09:52:21	⤷	http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html
2016-04-05 09:52:21		RequestReport (http://docs.developer.amazonservices.com/en_US/reports/Reports_RequestReport.html)
2016-04-05 09:52:21		Creates a report request and submits the request to Amazon MWS.
2016-04-07 11:48:59	⤷	xlrd==0.9.4
2016-04-12 10:34:03	⤷	http://www.davekuhlman.org/generateds_tutorial.html
2016-04-12 10:41:47	⤷	oleksandr uploaded a file: https://lengow.slack.com/files/oleksandr/F0ZTJ5R2R/productall.xsd (ProductAll.xsd)
2016-04-14 16:40:03	sebastien.charret	case "bdd-08":
2016-04-14 16:40:11	⤷	<?php
2016-04-14 16:40:12	⤷	class mysqlStatic
2016-04-14 16:40:13	⤷	{
2016-04-14 16:40:14	⤷	public $sql_serveur;
2016-04-14 16:40:15	⤷	public $sql_port;
2016-04-14 16:40:16	⤷	public $sql_utilisateur;
2016-04-14 16:40:17	⤷	public $sql_password;
2016-04-14 16:40:18	⤷	public $sql_bd;
2016-04-14 16:40:19	⤷	// constructeur
2016-04-14 16:40:20	⤷	public function __construct()
2016-04-14 16:40:21	⤷	{
2016-04-14 16:40:22	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:40:23	⤷	$this->sql_port = 3306;
2016-04-14 16:40:24	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:40:26	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:40:26	⤷	$this->sql_bd = constant("base");
2016-04-14 16:40:28	⤷	}
2016-04-14 16:40:28	⤷	public function connection()
2016-04-14 16:40:30	⤷	{
2016-04-14 16:40:30	⤷	try
2016-04-14 16:40:32	⤷	{
2016-04-14 16:40:32	⤷	if ($this->sql_bd != 'lengow_flux' && (strpos($this->requete, 'lengow_flux') === false)) {
2016-04-14 16:40:34	⤷	$o = new PDO('mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:34	⤷	} else {
2016-04-14 16:40:36	⤷	$o = new PDO('mysql:host='.constant('master_flux_host').';port='.$this->sql_port.';dbname='.$this->sql_bd, $this->sql_utilisateur, $this->sql_password);
2016-04-14 16:40:36	⤷	}
2016-04-14 16:40:38	⤷	$o->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
2016-04-14 16:40:38	⤷	return $o;
2016-04-14 16:40:40	⤷	} catch (Exception $e) {
2016-04-14 16:40:40	⤷	echo "sql_serveur: ".$this->sql_serveur."br /";
2016-04-14 16:40:42	⤷	echo "sql_port: ".$this->sql_port."br /";
2016-04-14 16:40:42	⤷	echo "sql_bd: ".$this->sql_bd."br /";
2016-04-14 16:40:44	⤷	printr($e);
2016-04-14 16:40:44	⤷	echo $e;
2016-04-14 16:40:46	⤷	exit();
2016-04-14 16:40:46	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:48	⤷	}
2016-04-14 16:40:50	⤷	$dbSwitch = array(
2016-04-14 16:40:50	⤷	'lengow_academy'                  => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_api'                      => 'bddread',
2016-04-14 16:40:52	⤷	'lengow_blog'                     => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_de'                  => 'bddread',
2016-04-14 16:40:54	⤷	'lengow_blog_uk'                  => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_cache'                    => 'bddread',
2016-04-14 16:40:56	⤷	'lengow_client'                   => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFlux'           => 'bddread',
2016-04-14 16:40:58	⤷	'lengow_conditionsFluxSave'       => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conditionsFluxConcurrent' => 'bddread',
2016-04-14 16:41:00	⤷	'lengow_conges'                   => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_crawler'                  => 'bddread',
2016-04-14 16:41:02	⤷	'lengow_cron'                     => 'bddread',
2016-04-14 16:41:04	⤷	'lengow_ean'                      => 'bdd-06',
2016-04-14 16:41:04	⤷	'lengow_concurrence'              => 'bdd-06',
2016-04-14 16:41:06	⤷	'lengow_eBay'                     => 'bddread',
2016-04-14 16:41:06	⤷	'lengow_emailing'                 => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_facturation'              => 'bddread',
2016-04-14 16:41:08	⤷	'lengow_faq'                      => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_feed_creator'             => 'bddread',
2016-04-14 16:41:10	⤷	'lengow_fluxRestore'              => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_flux_champsAdditionnels'  => 'bddread',
2016-04-14 16:41:12	⤷	'lengow_fnac'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_lang'                     => 'bddread',
2016-04-14 16:41:14	⤷	'lengow_log'                      => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_mcommerce'                => 'bddread',
2016-04-14 16:41:16	⤷	'lengow_news'                     => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_openRoadmap'              => 'bddread',
2016-04-14 16:41:18	⤷	'lengow_outils'                   => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_partenaire'               => 'bddread',
2016-04-14 16:41:20	⤷	'lengow_qcm'                      => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFlux'               => 'bddread',
2016-04-14 16:41:22	⤷	'lengow_reglesFluxMaths'          => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_reporting'                => 'bddread',
2016-04-14 16:41:24	⤷	'lengow_sem'                      => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_tagcapsule'               => 'bddread',
2016-04-14 16:41:26	⤷	'lengow_thesaurus'                => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_ticket'                   => 'bddread',
2016-04-14 16:41:28	⤷	'lengow_tracking'                 => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_analytics_geoip' => 'bddread',
2016-04-14 16:41:30	⤷	'lengow_tracking_byhour'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_client'          => 'bddread',
2016-04-14 16:41:32	⤷	'lengow_tracking_consolide'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_federated'       => 'bddread',
2016-04-14 16:41:34	⤷	'lengow_tracking_tagcapsule'      => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_wishlist'                 => 'bddread',
2016-04-14 16:41:36	⤷	'lengow_analytics'                => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces'             => 'bddread',
2016-04-14 16:41:38	⤷	'lengow_marketplaces_stats'       => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_pla'                      => 'bddread',
2016-04-14 16:41:40	⤷	'lengow_admin'                    => 'bddread'
2016-04-14 16:41:42	⤷	);
2016-04-14 16:41:42	⤷	class mysql
2016-04-14 16:41:44	⤷	{
2016-04-14 16:41:44	⤷	public $sql_serveur;
2016-04-14 16:41:46	⤷	public $sql_port;
2016-04-14 16:41:46	⤷	public $sql_utilisateur;
2016-04-14 16:41:48	⤷	public $sql_password;
2016-04-14 16:41:48	⤷	public $sql_bd;
2016-04-14 16:41:50	⤷	public $idClient;
2016-04-14 16:41:50	⤷	public $requete;
2016-04-14 16:41:52	⤷	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (my.lengow.int) http://security.lengow.int (security.lengow.int) http://rocket.lengow.int (rocket.lengow.int) http://apps.lengow.int (apps.lengow.int)                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (tracking.lengow.int) http://logistics.lengow.int (logistics.lengow.int) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-04-14 16:41:52	sebastien.charret	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:24	⤷	case "bdd-08":
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (http://my.lengow.int (my.lengow.int)) http://security.lengow.int (http://security.lengow.int (security.lengow.int)) http://rocket.lengow.int (http://rocket.lengow.int (rocket.lengow.int)) http://apps.lengow.int (http://apps.lengow.int (apps.lengow.int))                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (http://tracking.lengow.int (tracking.lengow.int)) http://logistics.lengow.int (http://logistics.lengow.int (logistics.lengow.int)) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-05-09 18:12:17	sebastien.charret	contact-api@priceminister.com
2016-04-14 16:41:52	sebastien.charret	private $foundrows;
2016-04-14 16:41:52	⤷	private $pdo;
2016-04-14 16:41:54	⤷	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:24	⤷	case "bdd-08":
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (http://my.lengow.int (my.lengow.int)) http://security.lengow.int (http://security.lengow.int (security.lengow.int)) http://rocket.lengow.int (http://rocket.lengow.int (rocket.lengow.int)) http://apps.lengow.int (http://apps.lengow.int (apps.lengow.int))                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (http://tracking.lengow.int (tracking.lengow.int)) http://logistics.lengow.int (http://logistics.lengow.int (logistics.lengow.int)) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-05-09 18:12:17	sebastien.charret	contact-api@priceminister.com
2016-04-14 16:41:54	sebastien.charret	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:24	⤷	case "bdd-08":
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (http://my.lengow.int (my.lengow.int)) http://security.lengow.int (http://security.lengow.int (security.lengow.int)) http://rocket.lengow.int (http://rocket.lengow.int (rocket.lengow.int)) http://apps.lengow.int (http://apps.lengow.int (apps.lengow.int))                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (http://tracking.lengow.int (tracking.lengow.int)) http://logistics.lengow.int (http://logistics.lengow.int (logistics.lengow.int)) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-05-09 18:12:17	sebastien.charret	mailto:contact-api@priceminister.com (contact-api@priceminister.com)
2016-05-30 11:13:23	⤷	http://10.100.1.67:8081
2016-04-14 16:41:54	sebastien.charret	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:24	⤷	case "bdd-08":
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (http://my.lengow.int (my.lengow.int)) http://security.lengow.int (http://security.lengow.int (security.lengow.int)) http://rocket.lengow.int (http://rocket.lengow.int (rocket.lengow.int)) http://apps.lengow.int (http://apps.lengow.int (apps.lengow.int))                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (http://tracking.lengow.int (tracking.lengow.int)) http://logistics.lengow.int (http://logistics.lengow.int (logistics.lengow.int)) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-05-09 18:12:17	sebastien.charret	mailto:contact-api@priceminister.com (contact-api@priceminister.com)
2016-05-30 11:13:23	⤷	http://10.100.1.67:8081
2016-07-07 16:10:58	oleksandr	1
2016-07-07 16:11:03	sebastien.charret	http://logistics.lengow.com:81/web/en/order/770217503/92979/new?start-date=&end-date=
2016-07-08 14:04:43	oleksandr	Access-Control-Allow-Origin: http://javascript.ru
2016-07-08 14:07:49	⤷	Access-Control-Allow-Origin: http://siteA.com
2016-07-08 14:07:49		Access-Control-Allow-Methods: GET, POST, PUT
2016-07-08 14:07:49		Access-Control-Allow-Headers: Content-Type
2016-04-14 16:41:54	sebastien.charret	private static $instance = null;
2016-04-14 16:41:54	⤷	public static function getInstance()
2016-04-14 16:41:56	⤷	{
2016-04-14 16:41:56	⤷	if (!isset($GLOBALS['connection'])) {
2016-04-14 16:41:58	⤷	$GLOBALS['connection'] = new mysql();
2016-04-14 16:41:58	⤷	}
2016-04-14 16:42:00	⤷	return $GLOBALS['connection'];
2016-04-14 16:42:00	⤷	}
2016-04-14 16:42:02	⤷	public function __construct($idC = 0)
2016-04-14 16:42:02	⤷	{
2016-04-14 16:42:04	⤷	$this->sql_serveur = constant("master_host");
2016-04-14 16:42:04	⤷	$this->sql_port = 3307;
2016-04-14 16:42:06	⤷	$this->sql_utilisateur = constant("master_user");
2016-04-14 16:42:06	⤷	$this->sql_password = constant("master_password");
2016-04-14 16:42:08	⤷	$this->sql_bd = constant("base");
2016-04-14 16:42:08	⤷	$this->pdo = array();
2016-04-14 16:42:10	⤷	$this->idClient = $idC;
2016-04-14 16:42:10	⤷	}
2016-04-14 16:42:12	⤷	private function connManager()
2016-04-14 16:42:12	⤷	{
2016-04-14 16:42:14	⤷	$langutf8 = array('PL', 'RU', 'CHN');
2016-04-14 16:42:14	⤷	// peut-etre qu'il serait interessant d'avoir du code "specifique" pour certain site, pour ne pas surcharger les autres applications
2016-04-14 16:42:16	⤷	$pdoOpts = ((constant('LANG_SITE') == 'PL' || constant('LANG_SITE') == 'RU' || constant('LANG_SITE') == 'CHN')  && (strpos($this->requete, 'lengow_lang') !== false)) ? array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8") : array();
2016-04-14 16:42:16	⤷	$dbKey = $this->sql_serveur;
2016-04-14 16:42:18	⤷	if(in_array(constant('LANG_SITE'), $langutf8) && (strpos($this->requete, 'lengow_lang') !== false)) {
2016-04-14 16:42:18	⤷	$dbKey = $dbKey . '-utf8';
2016-04-14 16:42:20	⤷	}
2016-04-14 16:42:20	⤷	switch($this->sql_serveur){
2016-04-14 16:42:22	⤷	case "bddread":
2016-04-14 16:42:22	⤷	$this->sql_port = 3706;
2016-04-14 16:42:24	⤷	break;
2016-04-14 16:42:24	⤷	case "bdd-08":
2016-04-14 16:42:26	⤷	$this->sql_port = 3806;
2016-04-14 16:42:26	⤷	break;
2016-04-14 16:42:28	⤷	case "bdd-06":
2016-04-14 16:42:28	⤷	//$this->sql_port = 3607;
2016-04-14 16:42:30	⤷	break;
2016-04-14 16:42:30	⤷	case "bdd-04":
2016-04-14 16:42:32	⤷	$this->sql_port = 3306;
2016-04-14 16:42:32	⤷	break;
2016-04-14 16:42:34	⤷	default:
2016-04-14 16:42:34	⤷	$this->sql_port = 3706;
2016-04-14 16:42:36	⤷	break;
2016-04-14 16:42:36	⤷	}
2016-04-14 16:42:38	⤷	if (!isset($this->pdo[$dbKey])) {
2016-04-14 16:42:38	⤷	if ($this->sql_serveur == 'bdd-06') print_r("BUG");
2016-04-14 16:42:40	⤷	if ($this->sql_serveur == 'bddread') {
2016-04-14 16:42:40	⤷	$this->sql_serveur = '95.131.141.166';
2016-04-14 16:42:42	⤷	}
2016-04-14 16:42:42	⤷	$this->pdo[$dbKey] = new PDO(
2016-04-14 16:42:44	⤷	'mysql:host='.$this->sql_serveur.';port='.$this->sql_port.';dbname='.$this->sql_bd,
2016-04-14 16:42:44	⤷	$this->sql_utilisateur,
2016-04-14 16:42:46	⤷	$this->sql_password,
2016-04-14 16:42:46	⤷	$pdoOpts
2016-04-14 16:42:48	⤷	);
2016-04-14 16:42:48	⤷	}
2016-04-14 16:42:50	⤷	if ($this->sql_serveur == 'bdd-06') print_r($this->pdo[$dbKey]);
2016-04-14 16:42:50	⤷	return $this->pdo[$dbKey];
2016-04-14 16:42:52	⤷	}
2016-04-14 16:42:52	⤷	private function dbManager($r, $base)
2016-04-14 16:42:54	⤷	{
2016-04-14 16:42:54	⤷	global $tabClientsBDD, $bddServers, $dbSwitch, $cooksite;
2016-04-14 16:42:56	⤷	if ($base == '') {
2016-04-14 16:42:56	⤷	$base = 'lengow_client';
2016-04-14 16:42:58	⤷	} elseif ($base == "lengow_flux") {
2016-04-14 16:42:58	⤷	if ($this->idClient > 0) {
2016-04-14 16:43:00	⤷	$idClient = $this->idClient;
2016-04-14 16:43:00	⤷	} else {
2016-04-14 16:43:02	⤷	preg_match('#fluxClient_([0-9]+)_([0-9]+)#', $r, $o);
2016-04-14 16:43:02	⤷	if (count($o)>0) {
2016-04-14 16:43:04	⤷	$idClient = $o[1];
2016-04-14 16:43:04	⤷	} else {
2016-04-14 16:43:06	⤷	$idClient = 0;
2016-04-14 16:43:06	⤷	}
2016-04-14 16:43:08	⤷	}
2016-04-14 16:43:08	⤷	foreach ($bddServers as $srvBDD) {
2016-04-14 16:43:10	⤷	if (in_array($idClient, $tabClientsBDD[$srvBDD])) {
2016-04-14 16:43:10	⤷	$srv_bdd = $srvBDD;
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:12	⤷	}
2016-04-14 16:43:14	⤷	// Change here for select real db
2016-04-14 16:43:14	⤷	$srv_bdd = 'bdd-06';
2016-04-14 16:43:16	⤷	$srv_host = 3306;
2016-04-14 16:43:16	⤷	return $srv_bdd . '_' . $srv_host;
2016-04-14 16:43:18	⤷	} else {
2016-04-14 16:43:18	⤷	return $dbSwitch[$base];
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:20	⤷	}
2016-04-14 16:43:22	⤷	public function getConnection()
2016-04-14 16:43:22	⤷	{
2016-04-14 16:43:24	⤷	return $this->pdo[$this->sql_serveur];
2016-04-14 16:43:24	⤷	}
2016-04-14 16:43:26	⤷	public function fetchAll($req)
2016-04-14 16:43:27	⤷	{
2016-04-14 16:43:28	⤷	$infos = explode('_', $this->dbManager($req, $this->sql_bd));
2016-04-14 16:43:28	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:43:30	⤷	//$this->sql_port=$infos[1];
2016-04-14 16:43:30	⤷	$this->requete = $req;
2016-04-14 16:43:32	⤷	$this->db = $this->connManager();
2016-04-14 16:43:34	⤷	if ($this->sql_serveur == 'bdd-06') {
2016-04-14 16:43:34	⤷	print_r("PDO");
2016-04-14 16:43:36	⤷	var_dump($this->pdo);
2016-04-14 16:43:36	⤷	var_dump($infos);
2016-04-14 16:43:38	⤷	}
2016-04-14 16:43:40	⤷	try {
2016-04-14 16:43:40	⤷	$p = $this->db->prepare($req);
2016-04-14 16:43:42	⤷	$p->setFetchMode(PDO::FETCH_ASSOC);
2016-04-14 16:43:42	⤷	$foo = $p->execute();
2016-04-14 16:43:44	⤷	} catch (Exception $e) {
2016-04-14 16:43:44	⤷	var_dump($e->getMessage());
2016-04-14 16:43:46	⤷	}
2016-04-14 16:43:46	⤷	// Verification si SQL_CALC_FOUND_ROWS existe dans la requete afin de recuperer le nombre total d'enregistrement
2016-04-14 16:43:48	⤷	if (preg_match("#SQL_CALC_FOUND_ROWS#", $this->requete)) {
2016-04-14 16:43:48	⤷	try {
2016-04-14 16:43:50	⤷	$c = $this->db->prepare('SELECT FOUND_ROWS() AS Nbr');
2016-04-14 16:43:50	⤷	$c->execute();
2016-04-14 16:43:52	⤷	$rows = $c->fetchColumn();
2016-04-14 16:43:52	⤷	$this->foundrows = $rows;
2016-04-14 16:43:54	⤷	} catch (Exception $e) {
2016-04-14 16:43:54	⤷	var_dump($e->getMessage());
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:56	⤷	}
2016-04-14 16:43:58	⤷	try {
2016-04-14 16:43:58	⤷	return $p->fetchAll();
2016-04-14 16:44:00	⤷	} catch (Exception $e) {
2016-04-14 16:44:00	⤷	var_dump($e->getMessage());
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:02	⤷	}
2016-04-14 16:44:04	⤷	public function fetchColumn($req)
2016-04-14 16:44:04	⤷	{
2016-04-14 16:44:06	⤷	$this->db = $this->connManager();
2016-04-14 16:44:06	⤷	$stmt = $this->db->prepare($req);
2016-04-14 16:44:08	⤷	$stmt->execute();
2016-04-14 16:44:08	⤷	try {
2016-04-14 16:44:10	⤷	return $stmt->fetchColumn();
2016-04-14 16:44:10	⤷	} catch (Exception $e) {
2016-04-14 16:44:12	⤷	error_log($e->getMessage());
2016-04-14 16:44:12	⤷	}
2016-04-14 16:44:14	⤷	}
2016-04-14 16:44:14	⤷	public function getFoundRows()
2016-04-14 16:44:16	⤷	{
2016-04-14 16:44:17	⤷	return $this->foundrows;
2016-04-14 16:44:18	⤷	}
2016-04-14 16:44:18	⤷	public function goRequete()
2016-04-14 16:44:20	⤷	{
2016-04-14 16:44:20	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:22	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:23	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:24	⤷	$this->db = $this->connManager();
2016-04-14 16:44:25	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:26	⤷	}
2016-04-14 16:44:27	⤷	public function goExecute()
2016-04-14 16:44:28	⤷	{
2016-04-14 16:44:29	⤷	$infos = explode('_', $this->dbManager($this->requete, $this->sql_bd));
2016-04-14 16:44:30	⤷	$this->sql_serveur=$infos[0];
2016-04-14 16:44:31	⤷	$this->sql_port=$infos[1];
2016-04-14 16:44:32	⤷	$this->db = $this->connManager();
2016-04-14 16:44:33	⤷	return $this->db->exec($this->requete);
2016-04-14 16:44:34	⤷	}
2016-04-14 16:44:35	⤷	public function last_insert_id()
2016-04-14 16:44:36	⤷	{
2016-04-14 16:44:37	⤷	return $this->db->lastInsertId();
2016-04-14 16:44:38	⤷	}
2016-04-14 16:44:39	⤷	public function countRow()
2016-04-14 16:44:40	⤷	{
2016-04-14 16:44:41	⤷	$p = $this->db->prepare('SELECT FOUND_ROWS()');
2016-04-14 16:44:42	⤷	$p->execute();
2016-04-14 16:44:43	⤷	return $p->fetchColumn();
2016-04-14 16:44:44	⤷	}
2016-04-14 16:44:45	⤷	public function close()
2016-04-14 16:44:46	⤷	{
2016-04-14 16:44:47	⤷	$this->db = null;
2016-04-14 16:44:48	⤷	}
2016-04-14 16:44:49	⤷	public function __destruct()
2016-04-14 16:44:50	⤷	{
2016-04-14 16:44:51	⤷	$this->close();
2016-04-14 16:44:52	⤷	}
2016-04-14 16:44:53	⤷	}
2016-04-14 16:44:54	⤷	@clement
2016-04-18 14:24:11	⤷	bo de PM :                                                                                                                                                                                                   │
2016-04-18 14:24:11	⤷	26.#teamjdr             │11:18:17                 ⤷ ╡ id : lengow75                                                                                                                                                                                                │
2016-04-18 14:24:11	⤷	27.#team-burger         │11:18:17                 ⤷ ╡ mdp : Lengow4475                                                                                                                                                                                             │
2016-04-18 14:24:11	⤷	28.#project_achievements│11:18:17                 ⤷ ╡ token : WS: 41614e368dd54cbe847e0bf3b767b109                                                                                                                                                                 │
2016-04-18 14:24:11	⤷	29.#team-dev-marketplace│11:18:18                 ⤷ ╡ token2: edeb774f9fa54085b0798d0ea5236194                                                                                                                                                                     │
2016-04-18 14:24:11	⤷	30.#team-jdr            │11:18:18                 ⤷ ╡ https://developer.priceminister.com/blog/fr/ressources/templates-csv-import?country=com 
2016-04-18 16:31:00	⤷	10.100.1.75 http://my.lengow.int (http://my.lengow.int (my.lengow.int)) http://security.lengow.int (http://security.lengow.int (security.lengow.int)) http://rocket.lengow.int (http://rocket.lengow.int (rocket.lengow.int)) http://apps.lengow.int (http://apps.lengow.int (apps.lengow.int))                   │
2016-04-18 16:31:00	⤷	│                           ╡ http://tracking.lengow.int (http://tracking.lengow.int (tracking.lengow.int)) http://logistics.lengow.int (http://logistics.lengow.int (logistics.lengow.int)) 
2016-04-19 11:13:07	⤷	Je vais commencer ReportManager Priceminister
2016-04-19 11:13:37	⤷	Je le dit au cas ou vous auriez deja commencer
2016-04-19 11:13:45	oleksandr	Moi non
2016-04-19 11:14:33	sebastien.charret	Ok
2016-04-19 14:43:33	⤷	http://10.100.1.71:8000/v3/catalog/render?feed_id=1843&output_format=lengow 
2016-04-20 14:17:51	oleksandr	hello
2016-04-20 14:18:08	⤷	j'ai une question
2016-04-20 14:18:31	sebastien.charret	Oui
2016-04-20 14:18:42	⤷	?
2016-04-20 14:19:07	oleksandr	transformer
2016-04-20 14:19:08	⤷	product['category_product']
2016-05-09 18:12:17	sebastien.charret	mailto:contact-api@priceminister.com (contact-api@priceminister.com)
2016-05-30 11:13:23	⤷	http://10.100.1.67:8081
2016-07-07 16:10:58	oleksandr	1
2016-07-07 16:11:03	sebastien.charret	http://logistics.lengow.com:81/web/en/order/770217503/92979/new?start-date=&end-date=
2016-07-08 14:04:43	oleksandr	Access-Control-Allow-Origin: http://javascript.ru
2016-07-08 14:07:49	⤷	Access-Control-Allow-Origin: http://siteA.com
2016-07-08 14:07:49		Access-Control-Allow-Methods: GET, POST, PUT
2016-07-08 14:07:49		Access-Control-Allow-Headers: Content-Type
2016-07-13 11:10:38	⤷	https://github.com/mverteuil/pytest-ipdb
2016-07-15 18:05:44	sebastien.charret	sudo iptables -t nat -A OUTPUT -p tcp -d 95.131.141.168 -j DNAT --to-destination 95.131.141.168:8000
2016-07-18 16:48:43	oleksandr	Pour Amazon Europe :
2016-07-18 16:48:43		[3:41]  
2016-07-18 16:48:43		mailto:kevin@lengow.com (kevin@lengow.com)
2016-07-18 16:48:43		[3:41]  
2016-07-18 16:48:43		lengow75
2016-07-18 16:48:43		[3:41]  
2016-07-18 16:48:43		Pour Amazon US :
2016-07-18 16:48:43		[3:42]  
2016-07-18 16:48:43		mailto:mickael@lengow.com (mickael@lengow.com)
2016-07-18 16:48:43		[3:42]  
2016-07-18 16:48:43		lengow75
2016-07-18 16:49:44	⤷	define('AWS_ACCESS_KEY_ID', 'AKIAIZZ4BTNMCPZI5Q2A');
2016-07-18 16:49:44		    define('AWS_SECRET_ACCESS_KEY', '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');
2016-07-18 16:49:44		    define('APPLICATION_NAME', 'Lengow');
2016-07-18 16:49:44		    define('APPLICATION_VERSION', '0.1');
2016-07-18 16:49:44		    define ('MERCHANT_ID', 'AD23G0JQAV13Q');
2016-07-18 16:49:44		    define ('MARKETPLACE_ID', 'ATVPDKIKX0DER');
2016-07-21 10:58:07	⤷	http://caixia.lu (caixia.lu)
2016-07-21 10:58:07		[2:17]  
2016-07-21 10:58:07		mdp: lengow44
2016-07-21 10:58:07		[2:17]  
2016-07-21 10:58:07		my.lengow.dev
2016-07-25 11:03:11	sebastien.charret	nmap 95.131.141.168
2016-07-25 11:03:26	⤷	nc -v -nn 95.131.141.168 22
